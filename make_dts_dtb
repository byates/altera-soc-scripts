#!/bin/bash

# Started with this script from http://she-devel.com/makedts
# Modified in the following ways:
#  * now can be run from outside linux tree
#  * compiles the DTS to DTB
#  * Uses CROSS_COMPILE for compiler path

###############################################################################
##                                                                           ##
##  File:     makedts                                                        ##
##  Author:   Alison Chaiken <alison_chaiken@mentor.com>                     ##
##  Created:  Fri Oct 18 03:57:20 BST 2013                                   ##
##  Contents: Run dtc on a single device-tree source, invoking the           ##
##  C-preprocessor if appropriate, and processing all dependencies,          ##
##  to produce a single human-readable ASCII output.  Output is              ##
##  similar to fdtdump except that it operates on source files and           ##
##  emits strings as characters rather than hex equivalents.                 ##
##                                                                           ##
##  Copyright (c) 2013 Mentor Graphics.                                      ##
##                                                                           ##
##  This program is free software; you can redistribute it and/or            ##
##  modify it under the terms of the GNU General Public License as           ##
##  published by the Free Software Foundation; either version 2 of           ##
##  the License, or (at your option) any later version.                      ##
##                                                                           ##
###############################################################################

CC=${CROSS_COMPILE}gcc
ARCH=arm
# Extract souce file path information
fullpath=$(readlink -m $1)
filename="${fullpath##*/}"                      # Strip longest match of */ from start
dir="${fullpath:0:${#fullpath} - ${#filename}}" # Substring from 0 thru pos of filename
base="${filename%.[^.]*}"                       # Strip shortest match of . plus at least one non-dot char from end
ext="${filename:${#base} + 1}"                  # Substring from len of base thru end
if [[ -z "$base" && -n "$ext" ]]; then          # If we have an extension and no base, it's really the base
    base=".$ext"
    ext=""
fi
BASE=${dir}${base}

DTC_CPP_FLAGS="-E -Wp,-MD,$BASE.pre.tmp -nostdinc -Iarch/$ARCH/boot/dts -Iarch/$ARCH/boot/dts/include -undef -D__DTS__  -x assembler-with-cpp"

function usage()
{
	echo ""
	echo "makedts compiles a top-level 'board file' device-tree source file "
	echo "by processing all its dependencies and producing output with the suffix .out.dts."
	echo ""
	echo "makedts <file.dts> <path/to/linux_root/>"
	exit 1
}

function calc_kernel_version()
{
	VERSION=0
	VERSION=`head -1 Makefile | awk {'print $3;'}`
	PATCHLEVEL=`grep PATCHLEVEL Makefile | head -1 | awk {'print $3;'}`
	SUBLEVEL=`grep SUBLEVEL Makefile | head -1 | awk {'print $3;'}`
	EXTRAVERSION=`grep EXTRAVERSION Makefile | head -1 | awk {'print $3;'}`

	if [[ $VERSION -eq 0 ]]
	   then
		usage
	fi

	KERNELVERSION_HUMAN=$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION
}

if [[ $# -ne 2 ]] ; then
   usage
fi

pushd $2 > /dev/null

# Should be in kernel source root directory now
if ( [ ! -d arch ] || [ ! -d scripts ] ) ; then
   usage
fi

calc_kernel_version
echo "KERNELVERSION_HUMAN is $KERNELVERSION_HUMAN"
KERNELVERSION=`expr $VERSION \* 65536 + $PATCHLEVEL \* 256 + $SUBLEVEL `
echo "KERNELVERSION is $KERNELVERSION"

# CPP support in dtc first appeared in 3.7: (+ (* 3 65536) (* 7 256)) 198400
if [[ $KERNELVERSION -lt 198400 ]]
   then
    echo "Older kernel: no cpp invocation."
    scripts/dtc/dtc -O dts -o $BASE.out.dts $fullpath
    echo "Produced $BASE.out.dts"
else
    $CC $DTC_CPP_FLAGS -o $BASE.tmp $fullpath
    if [[ $? -ne 0 ]] ; then
        echo "C preprocessor parsing of DTS failed."
        exit
    fi
    scripts/dtc/dtc -O dts -o $BASE.out.dts -b 0 -i arch/$ARCH/boot/dts -d $BASE.dtc.tmp $BASE.tmp
    if [[ $? -eq 0 ]] ; then
        echo "Produced $BASE.out.dts"
        rm ${BASE}*.tmp
    fi
fi

if [[ $? -eq 0 ]] ; then
    ./scripts/dtc/dtc -I dts -O dtb -o $BASE.dtb $BASE.out.dts
    echo "Produced $BASE.dtb"
fi

popd > /dev/null

